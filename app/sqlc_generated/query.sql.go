// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package sqlc_generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createExpense = `-- name: CreateExpense :one
INSERT INTO expenses (user_id, sub_category_id, expense_date, amount, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at
`

type CreateExpenseParams struct {
	UserID        int32
	SubCategoryID pgtype.UUID
	ExpenseDate   pgtype.Date
	Amount        pgtype.Numeric
	Description   pgtype.Text
}

func (q *Queries) CreateExpense(ctx context.Context, arg CreateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, createExpense,
		arg.UserID,
		arg.SubCategoryID,
		arg.ExpenseDate,
		arg.Amount,
		arg.Description,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createIncome = `-- name: CreateIncome :one
INSERT INTO incomes (user_id, sub_category_id, income_date, amount, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, sub_category_id, income_date, amount, description, created_at, updated_at
`

type CreateIncomeParams struct {
	UserID        int32
	SubCategoryID pgtype.UUID
	IncomeDate    pgtype.Date
	Amount        pgtype.Numeric
	Description   pgtype.Text
}

func (q *Queries) CreateIncome(ctx context.Context, arg CreateIncomeParams) (Income, error) {
	row := q.db.QueryRow(ctx, createIncome,
		arg.UserID,
		arg.SubCategoryID,
		arg.IncomeDate,
		arg.Amount,
		arg.Description,
	)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.IncomeDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, name, password_hash)
VALUES ($1, $2, $3)
RETURNING id, email, name, password_hash, created_at, updated_at, deleted_at
`

type CreateUserParams struct {
	Email        string
	Name         string
	PasswordHash string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Name, arg.PasswordHash)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteExpense = `-- name: DeleteExpense :one
UPDATE expenses
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at
`

func (q *Queries) DeleteExpense(ctx context.Context, id int32) (Expense, error) {
	row := q.db.QueryRow(ctx, deleteExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteIncome = `-- name: DeleteIncome :one
UPDATE incomes
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, user_id, sub_category_id, income_date, amount, description, created_at, updated_at
`

func (q *Queries) DeleteIncome(ctx context.Context, id int32) (Income, error) {
	row := q.db.QueryRow(ctx, deleteIncome, id)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.IncomeDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users
SET deleted_at = NOW()
WHERE id = $1
RETURNING id, email, name, password_hash, created_at, updated_at, deleted_at
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getAllExpenses = `-- name: GetAllExpenses :many
SELECT id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at FROM expenses WHERE user_id = $1 ORDER BY expense_date DESC
`

func (q *Queries) GetAllExpenses(ctx context.Context, userID int32) ([]Expense, error) {
	rows, err := q.db.Query(ctx, getAllExpenses, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Expense
	for rows.Next() {
		var i Expense
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SubCategoryID,
			&i.ExpenseDate,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllIncomes = `-- name: GetAllIncomes :many
SELECT id, user_id, sub_category_id, income_date, amount, description, created_at, updated_at FROM incomes WHERE user_id = $1 ORDER BY income_date DESC
`

func (q *Queries) GetAllIncomes(ctx context.Context, userID int32) ([]Income, error) {
	rows, err := q.db.Query(ctx, getAllIncomes, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Income
	for rows.Next() {
		var i Income
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SubCategoryID,
			&i.IncomeDate,
			&i.Amount,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpense = `-- name: GetExpense :one
SELECT id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at FROM expenses WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExpense(ctx context.Context, id int32) (Expense, error) {
	row := q.db.QueryRow(ctx, getExpense, id)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getIncome = `-- name: GetIncome :one
SELECT id, user_id, sub_category_id, income_date, amount, description, created_at, updated_at FROM incomes WHERE id = $1 LIMIT 1
`

func (q *Queries) GetIncome(ctx context.Context, id int32) (Income, error) {
	row := q.db.QueryRow(ctx, getIncome, id)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.IncomeDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, name, password_hash, created_at, updated_at, deleted_at FROM users WHERE id = $1 AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateExpense = `-- name: UpdateExpense :one
UPDATE expenses
SET sub_category_id = $2,
	expense_date = $3,
	amount = $4,
	description = $5,
	updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, sub_category_id, expense_date, amount, description, created_at, updated_at
`

type UpdateExpenseParams struct {
	ID            int32
	SubCategoryID pgtype.UUID
	ExpenseDate   pgtype.Date
	Amount        pgtype.Numeric
	Description   pgtype.Text
}

func (q *Queries) UpdateExpense(ctx context.Context, arg UpdateExpenseParams) (Expense, error) {
	row := q.db.QueryRow(ctx, updateExpense,
		arg.ID,
		arg.SubCategoryID,
		arg.ExpenseDate,
		arg.Amount,
		arg.Description,
	)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.ExpenseDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateIncome = `-- name: UpdateIncome :one
UPDATE incomes
SET sub_category_id = $2,
	income_date = $3,
	amount = $4,
	description = $5,
	updated_at = NOW()
WHERE id = $1
RETURNING id, user_id, sub_category_id, income_date, amount, description, created_at, updated_at
`

type UpdateIncomeParams struct {
	ID            int32
	SubCategoryID pgtype.UUID
	IncomeDate    pgtype.Date
	Amount        pgtype.Numeric
	Description   pgtype.Text
}

func (q *Queries) UpdateIncome(ctx context.Context, arg UpdateIncomeParams) (Income, error) {
	row := q.db.QueryRow(ctx, updateIncome,
		arg.ID,
		arg.SubCategoryID,
		arg.IncomeDate,
		arg.Amount,
		arg.Description,
	)
	var i Income
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SubCategoryID,
		&i.IncomeDate,
		&i.Amount,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET email = $2,
    name = $3,
    updated_at = NOW()
WHERE id = $1
RETURNING id, email, name, password_hash, created_at, updated_at, deleted_at
`

type UpdateUserParams struct {
	ID    int32
	Email string
	Name  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Email, arg.Name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Name,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
